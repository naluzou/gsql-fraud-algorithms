DROP QUERY num_paths_to_blacklisted

CREATE DISTRIBUTED QUERY num_paths_to_blacklisted(int hops, string path) FOR GRAPH application_fraud { 
  /*
  Hops: Each hop refers to an application-info-application traversal.
  Counts the number of shortest paths between each application and blacklisted applications within the number of hops.
  Paths can traverse along application info (email/ssn/phone/address)
  */
  
  // Key = blacklisted account id, Value = # of paths
  MapAccum<int, int> @paths;
  SumAccum<int> @total_paths;
  
  FILE f (path);
  f.println("id", "num_paths_to_blacklisted");
  
  // Start by finding the blacklisted applications
  Start = { Application.* };
  Start = SELECT s FROM Start:s
          WHERE s.blacklisted == true
          ACCUM
            s.@paths += (s.id -> 1);
  
  // For each hop, we can count the number of paths by conducting BFS
  // and adding @num_paths to the adjacent unvisited nodes.
  FOREACH i IN RANGE[1, hops] DO
    hop1 =  SELECT t
            FROM Start:s-((Has_Email|Has_SSN|Has_Phone|Has_Address):e)-(Email|SSN|Phone|Address):t
            ACCUM
              FOREACH (key, value) IN s.@paths DO
                IF NOT t.@paths.containsKey(key) THEN
                  t.@paths += (key -> value)
                END
              END;
    Start = SELECT t
            FROM hop1:s-((Has_Email|Has_SSN|Has_Phone|Has_Address):e)-Application:t
            ACCUM
              FOREACH (key, value) IN s.@paths DO
                IF NOT t.@paths.containsKey(key) THEN
                  t.@paths += (key -> value)
                END
              END;
  END;
  
  Start = {Application.*};
  Start = SELECT a
          FROM Start:a
          POST-ACCUM
            FOREACH (key, value) IN a.@paths DO
              a.@total_paths += value
            END,
            f.println(a.id, a.@total_paths);
}

INSTALL QUERY num_paths_to_blacklisted
RUN QUERY num_paths_to_blacklisted(2, "/home/tigergraph/mydata/application_fraud/features/num_paths_to_blacklisted.csv")