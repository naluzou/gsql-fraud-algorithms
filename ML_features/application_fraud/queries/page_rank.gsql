DROP QUERY PAGE_RANK

CREATE DISTRIBUTED QUERY PAGE_RANK () SYNTAX V2{
/*
 Compute the pageRank score for each vertex in the GRAPH
 In each iteration, compute a score for each vertex:
     score = (1-damping) + damping*sum(received scores FROM its neighbors).
 The pageRank algorithm stops when either of the following is true:
 a) it reaches max_iter iterations;
 b) the max score change for any vertex compared to the last iteration <= max_change.
 v_type: vertex types to traverse          print_accum: print JSON output
 e_type: edge types to traverse            result_attr: INT attr to store results to
 max_iter; max #iterations                 file_path: file to write CSV output to
 top_k: #top scores to output              display_edges: output edges for visualization
 max_change: max allowed change between iterations to achieve convergence
 damping: importance of traversal vs. random teleport

 This query supports only taking in a single edge for the time being (8/13/2020).
*/
	TYPEDEF TUPLE<VERTEX Vertex_ID, FLOAT score> Vertex_Score;
	MaxAccum<FLOAT> @@max_diff = 9999;    # max score change in an iteration
	SumAccum<FLOAT> @recvd_score = 0; # sum of scores each vertex receives FROM neighbors
	SumAccum<FLOAT> @score = 1;           # initial score for every vertex is 1.
	MapAccum<INT, FLOAT> @@group_scores;	
  
	INT max_iter=25;
	FLOAT damping=0.85;
	FLOAT max_change=0.001;

# PageRank iterations	
	Start = {ACCOUNT.*};                     # Start with all vertices of specified type(s)
	WHILE @@max_diff > max_change LIMIT max_iter DO
			@@max_diff = 0;
			V = SELECT s
				FROM Start:s-(SENT_PAYMENT:e1)-TRANSACTION:t-(RECEIVED_PAYMENT:e2)-ACCOUNT:r
				ACCUM r.@recvd_score += s.@score/(s.outdegree());
      // Second query in case some vertices don't have outgoing edges.
			V = SELECT s FROM Start:s
        POST-ACCUM s.@score = (1.0-damping) + damping * s.@recvd_score,
						   s.@recvd_score = 0,
						   @@max_diff += abs(s.@score - s.@score');
	END; # END WHILE loop
  
	UPDATE s FROM Start:s SET s.page_rank=s.@score;
}

INSTALL QUERY PAGE_RANK
RUN QUERY PAGE_RANK()
