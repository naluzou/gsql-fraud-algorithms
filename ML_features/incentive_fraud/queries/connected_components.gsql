DROP QUERY connected_components

CREATE DISTRIBUTED QUERY connected_components() FOR GRAPH incentive_fraud { 
  /*
  Creates connected components based on the Referred edge.
  Each component should be a tree structure.
  */
  
  MinAccum<int> @cc_id = 0;
  SumAccum<int> @old_id = 0;
  OrAccum<bool> @active;
  OrAccum<bool> @is_root;
  
  Start = {Account.*};

  # Initialize: Label each vertex with its own internal ID
  S = SELECT x 
    FROM Start:x
    POST-ACCUM
      x.@cc_id = getvid(x),
      x.@old_id = getvid(x),
      x.@is_root = true
    ;

  # Propagate smaller internal IDs until no more ID changes can be DOne
  WHILE (Start.size() > 0) DO
    Start = SELECT t
            FROM Start:s -((Referred|Referred_By):e)-> Account:t
            ACCUM t.@cc_id += s.@cc_id // If s has a smaller id than t, copy the id to t
            POST-ACCUM
              CASE WHEN t.@old_id != t.@cc_id THEN // If t's id has changed
                t.@old_id = t.@cc_id,
                t.@active = true
              ELSE 
                t.@active = false
              END
            HAVING t.@active == true
            ;
  END;
  
  Start = {Account.*};

  Nonroots = SELECT s FROM Start:s-(Referred_By:e)->Account:t ACCUM s.@is_root = false;

  UPDATE s FROM Start:s SET
    s.group_id = s.@cc_id,
    s.is_root = s.@is_root;
}

INSTALL QUERY connected_components
RUN QUERY connected_components()
