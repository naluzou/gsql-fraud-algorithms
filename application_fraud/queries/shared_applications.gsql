DROP QUERY shared_applications

CREATE DISTRIBUTED QUERY shared_applications(string path) FOR GRAPH application_fraud { 
  /*
  Find the number of applications that:
  A) share the same phone/email/address with this application
  B) share at least another phone/email/address between each other
  */
  
  TYPEDEF TUPLE<string item1, string item2> info_tuple;
  
  MaxAccum<string> @email;
  MaxAccum<string> @phone;
  MaxAccum<string> @address;
  MapAccum<info_tuple, SetAccum<int>> @phone_email;
  MapAccum<info_tuple, SetAccum<int>> @phone_address;
  MapAccum<info_tuple, SetAccum<int>> @email_address;
  MaxAccum<int> @max_phone_email;
  MaxAccum<int> @max_phone_address;
  MaxAccum<int> @max_email_address;
  
  FILE f (path);
  f.println("id", "shared_phone+email", "shared_phone+address", "shared_email+address");
  
  // Store the phone, email, and address of each application
  Start = {Application.*};
  Result =  SELECT s
            FROM Start:s-(Has_Phone:e)-Phone:p
            ACCUM s.@phone += p.phone;
  Result =  SELECT s
            FROM Start:s-(Has_Email:e)-Email:p
            ACCUM s.@email += p.email;
  Result =  SELECT s
            FROM Start:s-(Has_Address:e)-Address:p
            ACCUM s.@address += p.address;
  
  Result =  SELECT p
            FROM Start:s-((Has_Phone|Has_Email|Has_Address):e)-(Phone|Email|Address):p
            ACCUM
              p.@phone_email += (info_tuple(s.@phone, s.@email) -> s.id),
              p.@phone_address += (info_tuple(s.@phone, s.@address) -> s.id),
              p.@email_address += (info_tuple(s.@email, s.@address) -> s.id);
  
  Result =  SELECT t
            FROM Result:p-((Has_Phone|Has_Email|Has_Address):e)-Application:t
            ACCUM
              t.@phone_email += p.@phone_email,
              t.@phone_address += p.@phone_address,
              t.@email_address += p.@email_address
            POST-ACCUM
              FOREACH (key, value) IN t.@phone_email DO
                t.@max_phone_email += value.size()
              END,
              FOREACH (key, value) IN t.@phone_address DO
                t.@max_phone_address += value.size()
              END,
              FOREACH (key, value) IN t.@email_address DO
                t.@max_email_address += value.size()
              END,
              f.println(t.id, t.@max_phone_email, t.@max_phone_address, t.@max_email_address);
}

INSTALL QUERY shared_applications
RUN QUERY shared_applications("/home/tigergraph/mydata/application_fraud/features/shared_applications.csv")

