DROP QUERY adjacent_transactions

CREATE DISTRIBUTED QUERY adjacent_transactions(int hops, string path) FOR GRAPH incentive_fraud { 
  /*
  For eacb transaction:
  Find the consumers connected to the transaction consumer in k hops
  Find the merchants connected to the transaction in k hops
  Return the number of transactions between these two groups.
  */
  
  // key = consumer id, subkey = merchant id, value = number of transactions to that merchant
  MapAccum<int, MapAccum<int, int>> @transactions;
  // key = merchant id, value = # of transactions.
  MapAccum<int, int> @aggregated_transactions;
  SetAccum<int> @adjacent_merchants;
  MinAccum<int> @merchant_id;
  
  FILE f (path);
  f.println("id", "adjacent_transactions");
  
  // Initialize transactions for each consumer by counting the number of transactions
  // to each merchant.
  Merchants = {Merchant.*};
  Transactions =  SELECT t
                  FROM Merchants:m-(Received_Payment:e)-Transaction:t
                  ACCUM t.@merchant_id += m.id;
  Consumers = SELECT c
              FROM Transactions:t-(Sent_Payment:e)-Account:c
              ACCUM c.@transactions += (c.id -> (t.@merchant_id -> 1));
  
  // Initialize adjacent_merchants for each merchant by adding its own id to it.
  Merchants = SELECT m
              FROM Merchants:m
              POST-ACCUM m.@adjacent_merchants += m.id;
  
  // For each hop, combine the transactions 
  FOREACH i IN RANGE[1, hops] DO
    MerchantInfo =  SELECT p
                    FROM Merchants:m-(Merchant_Has_Phone:e)-Phone:p
                    ACCUM p.@adjacent_merchants += m.@adjacent_merchants;
  
    Merchants = SELECT m 
                FROM MerchantInfo:p-(Merchant_Has_Phone:e)-Merchant:m
                ACCUM
                  m.@adjacent_merchants += p.@adjacent_merchants;
  
    ConsumerInfo =  SELECT p
                    FROM Consumers:c-((Has_Phone|Has_Device):e)-(Phone|Device):p
                    ACCUM
                      // Union the @transactions accumulator on each consumer vertex.
                      // We can't add two map accums because it might add the same consumer's transactions twice.
                      FOREACH (key, value) IN c.@transactions DO
                        IF p.@transactions.containsKey(key) == false THEN
                          p.@transactions += (key -> value)
                        END
                      END;
  
    Consumers = SELECT c
                FROM ConsumerInfo:p-((Has_Phone|Has_Device):e)-Account:c
                ACCUM
                      FOREACH (key, value) IN p.@transactions DO
                        IF c.@transactions.containsKey(key) == false THEN
                          c.@transactions += (key -> value)
                        END
                      END;
  END;
  
  Transactions = {Transaction.*};
  Transactions =  SELECT t
                  FROM Transactions:t-(Sent_Payment:e)-Account:c
                  ACCUM
                    // Combine the transaction counters for all of the adjacent consumers
                    FOREACH (key, value) IN c.@transactions DO
                      IF key != c.id THEN
                        t.@aggregated_transactions += value
                      END
                    END;
  Transactions =  SELECT t
                  FROM Transactions:t-(Received_Payment:e)-Merchant:m
                  ACCUM
                    t.@adjacent_merchants = m.@adjacent_merchants
                  POST-ACCUM
                    // Get the final total
                    int total = 0,
                    FOREACH merchant IN t.@adjacent_merchants DO
                      if merchant != t.@merchant_id THEN
                        total = total + t.@aggregated_transactions.get(merchant)
                      END
                    END,
                    f.println(t.id, total);
}

INSTALL QUERY adjacent_transactions
RUN QUERY adjacent_transactions(2, "/home/tigergraph/mydata/incentive_fraud/features/adjacent_transactions.csv")
