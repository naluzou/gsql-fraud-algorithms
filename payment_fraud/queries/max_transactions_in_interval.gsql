DROP QUERY max_transactions_in_interval

CREATE DISTRIBUTED QUERY max_transactions_in_interval(int time_interval, string path) FOR GRAPH payment_fraud { 
  /*
  Find the max number of transactions made to the same merchant within a given interval (int minutes) for each account
  */ 
  
  TYPEDEF TUPLE<datetime date> date_tuple;
  
  // Stores a list of transaction dates to each merchant, for a specific account.
  MapAccum<int, ListAccum<date_tuple>> @dates;
  
  MinAccum<int> @merchant_id;

  // Heap, list, and max accum are auxilary data structures
  HeapAccum<date_tuple>(1000, date ASC) @heap;
  ListAccum<datetime> @list;
  MaxAccum<int> @max = 1;
  
  FILE f (path);
  f.println("id", "max_transactions_in_interval");
  
  Start = { Transaction.* };
  
  // Store merchant id on each transaction vertex
  Merchants = SELECT m
              FROM Start:t-(Received_Payment:e)-Merchant:m
              ACCUM t.@merchant_id += m.id;
  
  Start = { Account.* };
  Start = SELECT s
          FROM Start:s-(Sent_Payment:e)-Transaction:t
          ACCUM
            // Collect all dates by merchant id
            s.@dates += (t.@merchant_id -> date_tuple(t.date))
          POST-ACCUM
            FOREACH (key, list) IN s.@dates DO
              // For each merchant, first load the dates into a heap to sort the payments
              s.@heap.clear(),
              s.@list.clear(),
              FOREACH p IN list DO
                s.@heap += p
              END,
              FOREACH p IN s.@heap DO
                s.@list += p.date
              END,
  
              datetime start_date = s.@heap.pop().date,
              int start_index = 0,
              datetime curr_date = start_date,
              int occurrences = 0,
              int diff_minutes = 0,
              WHILE diff_minutes > time_interval OR s.@heap.size() > 0 DO
                IF diff_minutes > time_interval THEN
                  start_index = start_index + 1,
                  curr_date = s.@list.get(start_index),
                  s.@max += occurrences,
                  occurrences = occurrences - 1
                ELSE
                  occurrences = occurrences + 1,
                  curr_date = s.@heap.pop().date
                END,
                s.@max += occurrences,
                diff_minutes = datetime_diff(curr_date, start_date) / 60
              END
            END,
  
            f.println(s.id, s.@max);
}

INSTALL QUERY max_transactions_in_interval
RUN QUERY max_transactions_in_interval(3, "/home/tigergraph/mydata/payment_fraud/features/max_transactions_in_interval.csv")