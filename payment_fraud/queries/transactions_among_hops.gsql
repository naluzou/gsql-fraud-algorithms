DROP QUERY transactions_among_hops

CREATE DISTRIBUTED QUERY transactions_among_hops(datetime start_time, datetime end_time, int hops, string path) FOR GRAPH payment_fraud { 
  /*
  Returns the number of transactions completed between times A and B for each account,
  among neighbors linked to the account via the same device/ip
  */

  // Key = account id, Value = # of transactions
  MapAccum<int, int> @transactions;
  
  FILE f (path);
  f.println("id", "transactions_among_hops");

  // Initialize @self_transactions
  Transactions = {Transaction.*};
  Transactions =  SELECT t
                  FROM Transactions:t-(Sent_Payment:e)-Account:a
                  WHERE t.date >= start_time AND t.date <= end_time
                  ACCUM a.@transactions += (a.id -> 1);
  
  Accounts = {Account.*};
  FOREACH j IN RANGE[1, hops] DO
    // Instead of adding accumulators, we need to union the keys without adding the values.
    // Otherwise we will double count the transactions
    Info =  SELECT i
            FROM Accounts:a-((Has_Device|Has_Ip):e)-(Device|Ip):i
            ACCUM
              FOREACH (account_id, transactions) IN a.@transactions DO
                IF i.@transactions.containsKey(account_id) == false THEN
                  i.@transactions += (account_id -> transactions)
                END
              END;
    Accounts =  SELECT a
                FROM Info:i-((Has_Device|Has_Ip):e)-Account:a
                ACCUM
                  FOREACH (account_id, transactions) IN i.@transactions DO
                    IF a.@transactions.containsKey(account_id) == false THEN
                      a.@transactions += (account_id -> transactions)
                    END
                  END;
  END;
  
  Accounts = SELECT a
          FROM Accounts:a
          POST-ACCUM
            int total = 0,
            FOREACH (account_id, transactions) IN a.@transactions DO
              IF account_id != a.id THEN
                total = total + transactions
              END
            END,
            
            f.println(a.id, total);
}

INSTALL QUERY transactions_among_hops
RUN QUERY transactions_among_hops("2020-03-09 11:00:00", "2020-03-11 11:00:00", 2, "/home/tigergraph/mydata/payment_fraud/features/transactions_among_hops.csv")

